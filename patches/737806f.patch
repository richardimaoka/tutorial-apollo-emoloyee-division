commit 737806fdea51eb209ad6ca6592ddca9f7fefe2b6
Author: Richard Imaoka <richard.e.imaoka@gmail.com>
Date:   Sun May 8 15:17:06 2022 +0900

    add English division names

diff --git a/client/src/components/company/DivisionCard.tsx b/client/src/components/company/DivisionCard.tsx
index 965adc3..ff07d17 100644
--- a/client/src/components/company/DivisionCard.tsx
+++ b/client/src/components/company/DivisionCard.tsx
@@ -40,6 +40,9 @@ export const DivisionCard = ({ fragment }: DivisionCardProps): JSX.Element => {
           borderRadius: "0px 0px 8px 8px",
           backgroundColor: "#ffffff",
           padding: "4px 16px",
+          display: "flex",
+          flexDirection: "column",
+          justifyContent: "space-between",
         }}
       >
         <div>
@@ -63,6 +66,21 @@ export const DivisionCard = ({ fragment }: DivisionCardProps): JSX.Element => {
             {fragment.numMembers}人
           </span>
         </div>
+        <div>
+          <span
+            style={{
+              display: "inline-block",
+              width: "100%",
+              textAlign: "right",
+              fontFamily: "'Noto Sans JP', sans-serif",
+              fontSize: "28px",
+              fontWeight: "900",
+              color: "#1470C3",
+            }}
+          >
+            {fragment.divisionDisplayNameEn}
+          </span>
+        </div>
       </div>
     </div>
   );
@@ -72,6 +90,7 @@ DivisionCard.fragment = gql`
   fragment DivisionCard on Division {
     divisionName
     divisionDisplayName
+    divisionDisplayNameEn
     numDepartments
     numMembers
   }
diff --git a/client/src/generated/graphql.ts b/client/src/generated/graphql.ts
index 113c435..7cc2d0f 100644
--- a/client/src/generated/graphql.ts
+++ b/client/src/generated/graphql.ts
@@ -1,10 +1,16 @@
-import { gql } from '@apollo/client';
-import * as Apollo from '@apollo/client';
+import { gql } from "@apollo/client";
+import * as Apollo from "@apollo/client";
 export type Maybe<T> = T | null;
 export type InputMaybe<T> = Maybe<T>;
-export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
-export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
-export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
+export type Exact<T extends { [key: string]: unknown }> = {
+  [K in keyof T]: T[K];
+};
+export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
+  [SubKey in K]?: Maybe<T[SubKey]>;
+};
+export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
+  [SubKey in K]: Maybe<T[SubKey]>;
+};
 const defaultOptions = {} as const;
 /** All built-in and custom scalars, mapped to their actual values */
 export type Scalars = {
@@ -16,40 +22,59 @@ export type Scalars = {
 };
 
 export type Division = {
-  __typename?: 'Division';
-  divisionDisplayName: Maybe<Scalars['String']>;
-  divisionName: Maybe<Scalars['String']>;
-  numDepartments: Maybe<Scalars['Int']>;
-  numMembers: Maybe<Scalars['Int']>;
+  __typename?: "Division";
+  divisionDisplayName: Maybe<Scalars["String"]>;
+  divisionDisplayNameEn: Maybe<Scalars["String"]>;
+  divisionName: Maybe<Scalars["String"]>;
+  numDepartments: Maybe<Scalars["Int"]>;
+  numMembers: Maybe<Scalars["Int"]>;
 };
 
 export type Query = {
-  __typename?: 'Query';
+  __typename?: "Query";
   divisions: Maybe<Array<Maybe<Division>>>;
 };
 
-export type GetDivisionsQueryVariables = Exact<{ [key: string]: never; }>;
+export type GetDivisionsQueryVariables = Exact<{ [key: string]: never }>;
 
+export type GetDivisionsQuery = {
+  __typename?: "Query";
+  divisions: Array<{
+    __typename?: "Division";
+    divisionName: string | null;
+    divisionDisplayName: string | null;
+    divisionDisplayNameEn: string | null;
+    numDepartments: number | null;
+    numMembers: number | null;
+  } | null> | null;
+};
 
-export type GetDivisionsQuery = { __typename?: 'Query', divisions: Array<{ __typename?: 'Division', divisionName: string | null, divisionDisplayName: string | null, numDepartments: number | null, numMembers: number | null } | null> | null };
-
-export type DivisionCardFragment = { __typename?: 'Division', divisionName: string | null, divisionDisplayName: string | null, numDepartments: number | null, numMembers: number | null };
+export type DivisionCardFragment = {
+  __typename?: "Division";
+  divisionName: string | null;
+  divisionDisplayName: string | null;
+  divisionDisplayNameEn: string | null;
+  numDepartments: number | null;
+  numMembers: number | null;
+};
 
 export const DivisionCardFragmentDoc = gql`
-    fragment DivisionCard on Division {
-  divisionName
-  divisionDisplayName
-  numDepartments
-  numMembers
-}
-    `;
+  fragment DivisionCard on Division {
+    divisionName
+    divisionDisplayName
+    divisionDisplayNameEn
+    numDepartments
+    numMembers
+  }
+`;
 export const GetDivisionsDocument = gql`
-    query GetDivisions {
-  divisions {
-    ...DivisionCard
+  query GetDivisions {
+    divisions {
+      ...DivisionCard
+    }
   }
-}
-    ${DivisionCardFragmentDoc}`;
+  ${DivisionCardFragmentDoc}
+`;
 
 /**
  * __useGetDivisionsQuery__
@@ -66,14 +91,37 @@ export const GetDivisionsDocument = gql`
  *   },
  * });
  */
-export function useGetDivisionsQuery(baseOptions?: Apollo.QueryHookOptions<GetDivisionsQuery, GetDivisionsQueryVariables>) {
-        const options = {...defaultOptions, ...baseOptions}
-        return Apollo.useQuery<GetDivisionsQuery, GetDivisionsQueryVariables>(GetDivisionsDocument, options);
-      }
-export function useGetDivisionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDivisionsQuery, GetDivisionsQueryVariables>) {
-          const options = {...defaultOptions, ...baseOptions}
-          return Apollo.useLazyQuery<GetDivisionsQuery, GetDivisionsQueryVariables>(GetDivisionsDocument, options);
-        }
-export type GetDivisionsQueryHookResult = ReturnType<typeof useGetDivisionsQuery>;
-export type GetDivisionsLazyQueryHookResult = ReturnType<typeof useGetDivisionsLazyQuery>;
-export type GetDivisionsQueryResult = Apollo.QueryResult<GetDivisionsQuery, GetDivisionsQueryVariables>;
\ No newline at end of file
+export function useGetDivisionsQuery(
+  baseOptions?: Apollo.QueryHookOptions<
+    GetDivisionsQuery,
+    GetDivisionsQueryVariables
+  >
+) {
+  const options = { ...defaultOptions, ...baseOptions };
+  return Apollo.useQuery<GetDivisionsQuery, GetDivisionsQueryVariables>(
+    GetDivisionsDocument,
+    options
+  );
+}
+export function useGetDivisionsLazyQuery(
+  baseOptions?: Apollo.LazyQueryHookOptions<
+    GetDivisionsQuery,
+    GetDivisionsQueryVariables
+  >
+) {
+  const options = { ...defaultOptions, ...baseOptions };
+  return Apollo.useLazyQuery<GetDivisionsQuery, GetDivisionsQueryVariables>(
+    GetDivisionsDocument,
+    options
+  );
+}
+export type GetDivisionsQueryHookResult = ReturnType<
+  typeof useGetDivisionsQuery
+>;
+export type GetDivisionsLazyQueryHookResult = ReturnType<
+  typeof useGetDivisionsLazyQuery
+>;
+export type GetDivisionsQueryResult = Apollo.QueryResult<
+  GetDivisionsQuery,
+  GetDivisionsQueryVariables
+>;
diff --git a/server/data.json b/server/data.json
index d38e7cb..69c3dbc 100644
--- a/server/data.json
+++ b/server/data.json
@@ -2,24 +2,28 @@
   {
     "divisionName": "trading",
     "divisionDisplayName": "トレーディング部門",
+    "divisionDisplayNameEn": "Trading",
     "numDepartments": 4,
     "numMembers": 105
   },
   {
     "divisionName": "sales",
     "divisionDisplayName": "セールス部門",
+    "divisionDisplayNameEn": "Sales",
     "numDepartments": 11,
     "numMembers": 201
   },
   {
     "divisionName": "operations",
     "divisionDisplayName": "業務部門",
+    "divisionDisplayNameEn": "Operations",
     "numDepartments": 32,
     "numMembers": 1005
   },
   {
     "divisionName": "accounting",
     "divisionDisplayName": "会計部門",
+    "divisionDisplayNameEn": "Accounting",
     "numDepartments": 13,
     "numMembers": 310
   }
diff --git a/server/schema.gql b/server/schema.gql
index 54ffd74..decee6f 100644
--- a/server/schema.gql
+++ b/server/schema.gql
@@ -5,6 +5,7 @@ type Query {
 type Division {
   divisionName: String
   divisionDisplayName: String
+  divisionDisplayNameEn: String
   numDepartments: Int
   numMembers: Int
 }
