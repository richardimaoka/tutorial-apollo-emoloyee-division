commit f28d1c128391b037a1f6c259da1bb941d9bb7d45
Author: Richard Imaoka <richard.e.imaoka@gmail.com>
Date:   Sun May 8 10:20:35 2022 +0900

    server actual data

diff --git a/server/data.json b/server/data.json
index 0967ef4..2dcedd6 100644
--- a/server/data.json
+++ b/server/data.json
@@ -1 +1,14 @@
-{}
+[
+  {
+    "divisionName": "trading"
+  },
+  {
+    "divisionName": "sales"
+  },
+  {
+    "divisionName": "operations"
+  },
+  {
+    "divisionName": "accounting"
+  }
+]
diff --git a/server/generated/graphql.ts b/server/generated/graphql.ts
index 5918e05..daa3ff4 100644
--- a/server/generated/graphql.ts
+++ b/server/generated/graphql.ts
@@ -19,9 +19,14 @@ export type Scalars = {
   Float: number;
 };
 
+export type Division = {
+  __typename?: "Division";
+  divisionName: Maybe<Scalars["String"]>;
+};
+
 export type Query = {
   __typename?: "Query";
-  hello: Maybe<Scalars["String"]>;
+  divisions: Maybe<Array<Maybe<Division>>>;
 };
 
 export type ResolverTypeWrapper<T> = Promise<T> | T;
@@ -132,6 +137,7 @@ export type DirectiveResolverFn<
 /** Mapping between all available schema types and the resolvers types */
 export type ResolversTypes = {
   Boolean: ResolverTypeWrapper<Scalars["Boolean"]>;
+  Division: ResolverTypeWrapper<Division>;
   Query: ResolverTypeWrapper<{}>;
   String: ResolverTypeWrapper<Scalars["String"]>;
 };
@@ -139,17 +145,35 @@ export type ResolversTypes = {
 /** Mapping between all available schema types and the resolvers parents */
 export type ResolversParentTypes = {
   Boolean: Scalars["Boolean"];
+  Division: Division;
   Query: {};
   String: Scalars["String"];
 };
 
+export type DivisionResolvers<
+  ContextType = any,
+  ParentType extends ResolversParentTypes["Division"] = ResolversParentTypes["Division"]
+> = {
+  divisionName: Resolver<
+    Maybe<ResolversTypes["String"]>,
+    ParentType,
+    ContextType
+  >;
+  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
+};
+
 export type QueryResolvers<
   ContextType = any,
   ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
 > = {
-  hello: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
+  divisions: Resolver<
+    Maybe<Array<Maybe<ResolversTypes["Division"]>>>,
+    ParentType,
+    ContextType
+  >;
 };
 
 export type Resolvers<ContextType = any> = {
+  Division: DivisionResolvers<ContextType>;
   Query: QueryResolvers<ContextType>;
 };
diff --git a/server/index.ts b/server/index.ts
index 78c0639..2448a3d 100644
--- a/server/index.ts
+++ b/server/index.ts
@@ -1,13 +1,41 @@
 import { ApolloServer, gql } from "apollo-server";
 import * as fs from "fs";
+import { Division, QueryResolvers } from "./generated/graphql";
 
 const typeDefs = gql`
   ${fs.readFileSync(__dirname.concat("/schema.gql"), "utf8")}
 `;
 
+// data.json から取得するデータの型を表す
+interface ContextFromFile {
+  divisions: Division[];
+}
+
+const resolvers: { Query: QueryResolvers<ContextFromFile> } = {
+  Query: {
+    divisions: async (_parent, _args, context, _info) => {
+      return context.divisions;
+    },
+  },
+};
+
 const server = new ApolloServer({
   typeDefs,
-  mocks: true,
+  resolvers,
+  context: async ({ req }: any) => {
+    try {
+      const jsonDataFile = __dirname.concat("/data.json");
+      const fileContent = await fs.promises.readFile(jsonDataFile, "utf8");
+      const jsonData = JSON.parse(fileContent);
+      return {
+        divisions: jsonData,
+      };
+    } catch (err) {
+      console.log("***ERROR OCURRED***");
+      console.log(err);
+      throw new Error("internal error happened!!");
+    }
+  },
 });
 
 // The `listen` method launches a web server.
diff --git a/server/schema.gql b/server/schema.gql
index 6ae991f..a815823 100644
--- a/server/schema.gql
+++ b/server/schema.gql
@@ -1,3 +1,7 @@
 type Query {
-  hello: String
+  divisions: [Division]
+}
+
+type Division {
+  divisionName: String
 }
